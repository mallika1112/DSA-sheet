Soution 1: Brute force

Approach: We'll make this work in three nested loops. First two loops to make every possible subset combination of that array. 
And third loop, to measure the sum between them. Return the maximum sum.

Time Complexity: O(N^3)
Space Complexity: O(1)


Solution 2: Little optimized solution

Approach: We can perform the same solution with two loops only. Make every possible solution in two loops and keep a final sum and current sum. Keep adding current sum, if it exceeds the final sum, replace it.

Time Complexity: O(N^2) 
Space Complexity: O(1)


Solution 3: Kadane's Algorithm

Approach: This can be done in Linear loop. You just need to keep track of two variables and some operations.
A variable storing max value so far
Another value storing where the max ends 

Time Complexity: O(N) 
Space Complexity:O(1)





Code For Solutions#include <iostream>
#include<vector>
using namespace std;


// Solution 1
// int subarray(vector<int> arr){
//   int max_Sum=0;
//   for(int i=0;i<arr.size();i++){
//     for(int j=i;j<arr.size();j++){
//       int sum=0;
//       for(int k=i;k<=j;k++){
//         sum+=arr[k];
//       }
//       if(sum>max_Sum)
//         max_Sum=sum;
//     }
//   }
//   return max_Sum;
// }


// Solution 2
int subarray(vector<int> arr){
  int curr_sum=0, max_Sum=0,sum=0;

  for(int i=0;i<arr.size();i++){
    sum=0;
    for(int j=i;j<arr.size();j++){
        sum+=arr[j];
        if(sum>max_Sum)
          max_Sum=sum;
    }
  }
  
  return max_Sum;
}


// Solution 3 (Kanade's Algorithm)
// int subarray(vector<int> arr){
//   int curr_sum=0, max_Sum=0;
//   for(int i=0;i<arr.size();i++){
//     curr_sum+=arr[i];
//     if(curr_sum>max_Sum)
//       max_Sum=curr_sum;
//     if(curr_sum<0)
//       curr_sum=0;
//   }
//   return max_Sum;
// }

//Main Function common for all

int main() {
  vector<int> arr{2,1,-3,4,-1,2,1,-5,4};
  int ans= subarray(arr);
  cout<<"Max sum: "<<ans;
}
